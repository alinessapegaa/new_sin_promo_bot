from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
from io import BytesIO
from flask import Flask  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç Flask
from threading import Thread  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
import os

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app_flask = Flask(__name__)

@app_flask.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200  # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask —Ä–∞–±–æ—Ç–∞–µ—Ç

def run_flask():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, —á—Ç–æ–±—ã Flask –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å Render
    port = int(os.environ.get("PORT", 8080))
    app_flask.run(host="0.0.0.0", port=port)  # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É 8080

TOKEN = "7909781824:AAHi_E5sHVk9n2HwbWUH2rE0AYKLPkL50A8"

# üìå –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
POST_TEXT = "üîÆ –û–±—ä—è–≤–ª—è–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! –£–∂–µ –∑–Ω–∞–µ–º, **–≥–¥–µ –∏ –∫–∞–∫ –≤—ã –ø—Ä–æ–≤–µ–¥—ë—Ç–µ 8 –º–∞—Ä—Ç–∞** ‚Äî –∏ —Ä–∞—Å–∫—Ä–æ–µ–º —Ç–∞–π–Ω—É, –µ—Å–ª–∏ –Ω–∞–∂–º—ë—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!"

# üìå –û—Ç–≤–µ—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
RESPONSES = [
    "–ö—É–ø–∏—Ç–µ –¢–£ –°–ê–ú–£–Æ –≤–µ—â—å",
    "–ü—Ä–æ–≤–µ–¥—ë—Ç–µ –≤—Ä–µ–º—è –≤ –∫—Ä—É–≥—É —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö",
    "–ü–æ–ª—É—á–∏—Ç–µ –ª—É—á—à–∏–π –≤ –∂–∏–∑–Ω–∏ –ø–æ–¥–∞—Ä–æ–∫",
    "–ë—É–¥–µ—Ç–µ —Å–∏—è—Ç—å (—Å–ø–∞—Å–∏–±–æ –æ–±—Ä–∞–∑—É –∏–∑ –°–ò–ù ü§≠)",
    "–ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—ë—Ç–µ",
    "–ü–æ–ª—É—á–∏—Ç–µ –¥–∞–∂–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—É–∫–µ—Ç–æ–≤",
    "–ü–æ—Ä–∞–¥—É–µ—Ç–µ —Å–µ–±—è —à–æ–ø–∏–Ω–≥–æ–º –≤ –°–ò–ù",
    "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
    "–°—Ö–æ–¥–∏—Ç–µ –≤ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ"
]

# üìå –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É üì∑, –∏ —è —Å–¥–µ–ª–∞—é –ø–æ—Å—Ç!")

async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é —Ñ–æ—Ç–æ...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)

        # –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_photo_path = f"photo_{user_id}.jpg"
        await photo_file.download_to_drive(temp_photo_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(temp_photo_path):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è!")
            return

        # –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        context.bot_data["last_photo"] = temp_photo_path
        context.bot_data["last_caption"] = "üîÆ –û–±—ä—è–≤–ª—è–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! –£–∂–µ –∑–Ω–∞–µ–º, **–≥–¥–µ –∏ –∫–∞–∫ –≤—ã –ø—Ä–æ–≤–µ–¥—ë—Ç–µ 8 –º–∞—Ä—Ç–∞** ‚Äî –∏ —Ä–∞—Å–∫—Ä–æ–µ–º —Ç–∞–π–Ω—É, –µ—Å–ª–∏ –Ω–∞–∂–º—ë—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!"

        # üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ üíñ (3√ó3)
        keyboard = [
            [
                InlineKeyboardButton("üíñ", callback_data=f"btn_{i}_{user_id}") for i in range(j, j+3)
            ]
            for j in range(0, 9, 3)
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(temp_photo_path, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=POST_TEXT,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n\n`/post ID_–∫–∞–Ω–∞–ª–∞`\n\n–ü—Ä–∏–º–µ—Ä: `/post -1001234567890`", parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{str(e)}`", parse_mode="Markdown")


async def post_to_channel(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    if not context.args:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ ID –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n–ü—Ä–∏–º–µ—Ä:\n`/post -1001234567890`", parse_mode="Markdown")
        return

    channel_id = context.args[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç
    if "last_photo" not in context.bot_data or "last_caption" not in context.bot_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–æ—Ç—É.")
        return

    # –î–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç
    photo_path = context.bot_data["last_photo"]
    caption = context.bot_data["last_caption"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if not os.path.exists(photo_path):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ üíñ (3√ó3)
    keyboard = [
        [
            InlineKeyboardButton("üíñ", callback_data=f"btn_{i}_{user_id}") for i in range(j, j+3)
        ]
        for j in range(0, 9, 3)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
        with open(photo_path, "rb") as photo:
            await context.bot.send_photo(
                chat_id=channel_id,
                photo=photo,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode="Markdown"
                )


        await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}!")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(photo_path)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:\n`{str(e)}`", parse_mode="Markdown")


async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    _, button_index, user_id = query.data.split("_")

    response_text = RESPONSES[int(button_index)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await query.answer(response_text, show_alert=True)


def main():
    # –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=run_flask)
    thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CommandHandler("post", post_to_channel))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
